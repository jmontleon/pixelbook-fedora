---
- hosts: localhost
  vars:
    sound_server: pipewire
    leftmeta: capslock
  tasks:
  - name: Check distribution
    fail:
      msg: This playbook is only intended to be run on Fedora
    when: ansible_distribution != 'Fedora'

  - name: Check distribution version
    fail:
      msg: You must be running Fedora 34 or greater
    when: ansible_distribution_version|int < 34

  - name: Check hardware is an EVE Pixelbook
    fail:
      msg: This playbook is only intended to be run on an EVE Pixelbook
    when: ansible_board_vendor != 'Google' or ansible_board_name != 'Eve'

  - name: Check user
    fail:
      msg: You should run this as a non-root user
    when: ansible_user_id == "root"

  - block:
    - name: Enable COPR repo
      community.general.copr:
        host: copr.fedorainfracloud.org
        state: enabled
        name: jmontleon/pixelbook
      become: true

    - name: Create i915 modprobe conf
      copy:
        content: "options i915 enable_dpcd_backlight=1"
        dest: /etc/modprobe.d/i915.conf
      become: true

    - name: Add cros_ec_typec blacklist
      copy:
        dest: /etc/modprobe.d/cros_ec_typec.conf
        content: "blacklist cros_ec_typec"
      become: true
      register: cros_ec_typec_modprobe

    - name: Update initramfs
      shell: dracut -f
      become: true
      when: cros_ec_typec_modprobe.changed

    - name: Update system
      dnf:
        name: "*"
        state: latest
      become: true

    - name: Get latest recovery image information
      uri:
        url: https://dl.google.com/dl/edgedl/chromeos/recovery/recovery.conf?source=linux_recovery.sh
        return_content: true
      register: recovery_info

    - name: Parse recovery image information
      set_fact:
        recovery_image_url: "{{ (recovery_info.content | regex_search('https.*eve_recovery_stable.*zip')).split('\"') | last }}"

    - name: Create a temporary working directory
      tempfile:
        state: directory
        path: "{{ playbook_dir }}"
      register: tmp_dir

    - name: Check for downloaded image
      stat:
        path: "{{ playbook_dir }}/{{ recovery_image_url.split('/') | last }}"
      register: file

    - name: Download recovery image
      get_url:
        url: "{{ recovery_image_url }}"
        dest: "{{ playbook_dir }}"
      register: recovery_image_archive
      when: not(file.stat.exists)

    - name: Set image file
      set_fact:
        recovery_image_archive:
          dest: "{{ playbook_dir }}/{{ recovery_image_url | split('/') | last }}"
      when: file.stat.exists

    - name: Unzip recovery image
      unarchive:
        src: "{{ recovery_image_archive.dest }}"
        dest: "{{ tmp_dir.path }}"
        remote_src: yes
        list_files : true
      register: recovery_image_unarchive_results

    - name: Make device maps
      become: true
      command: "kpartx -s -av {{ tmp_dir.path }}/{{ recovery_image_unarchive_results.files | first }}"
      register: kpartx

    - name:
      set_fact:
        loop_device: "{{ kpartx.stdout_lines[2].split(' ')[2] }}"

    - name: Create chromeos recovery image mount point directory
      file:
        state: directory
        path: /mnt/chromeos_recovery_image
      become: true

    - name: Mount recovery image
      mount:
        path: /mnt/chromeos_recovery_image
        src: "/dev/mapper/{{ loop_device }}"
        fstype: ext2
        opts: ro
        state: mounted
        fstab: "{{ tmp_dir.path }}/fstab }}"
      become: true

    - name: Ensure dsm directory exists
      file:
        path: /opt/google/dsm/
        state: directory
        recurse: yes
      become: true

    - name: Copy dsmparam.bin
      copy:
        src: /mnt/chromeos_recovery_image/opt/google/dsm/dsmparam.bin
        dest: /opt/google/dsm/dsmparam.bin
      become: true

    - name: Copy firmware files
      copy:
        src: "/mnt/chromeos_recovery_image/lib/firmware/{{ item }}"
        dest: "/lib/firmware/{{ item }}"
        remote_src: true
      become: true
      with_items:
      - 9d71-GOOGLE-EVEMAX-0-tplg.bin
      - dsp_lib_dsm_core_spt_release.bin
      - intel/dsp_fw_C75061F3-F2B2-4DCC-8F9F-82ABB4131E66.bin

    - when:
      - sound_server == "pulseaudio"
      block:
      - name: Swap pipewire to pulseaudio
        become: true
        command:
          cmd: "dnf swap --allowerasing -y pipewire-pulseaudio pulseaudio"

      - name: Swap wireplumber
        become: true
        command:
          cmd: "dnf swap --allowerasing -y wireplumber pipewire-media-session"

      - name: Swap jack kit
        become: true
        command:
          cmd: "dnf swap --allowerasing -y pipewire-jack-audio-connection-kit jack-audio-connection-kit"

      - name: Remove pipewire packages
        become: true
        dnf:
          name:
          - pipewire-alsa
          - pipewire
          state: absent

    - when:
      - sound_server == "pipewire"
      block:
      - name: Swap pulseaudio to pipewire
        become: true
        command:
          cmd: "dnf swap --allowerasing -y pulseaudio pipewire-pulseaudio"

      - name: Swap wireplumber
        become: true
        command:
          cmd: "dnf swap --allowerasing -y pipewire-media-session wireplumber"

      - name: Swap jack kit
        become: true
        command:
          cmd: "dnf swap --allowerasing -y jack-audio-connection-kit pipewire-jack-audio-connection-kit"

      - name: Install pipewire packages
        become: true
        dnf:
          name:
          - pipewire-alsa
          - pipewire
          - pixelbook-wireplumber
          state: latest

    - name: Install pixelbook packages from COPR
      become: true
      dnf:
        name:
        - pixelbook-aer
        - pixelbook-alsa-ucm
        - pixelbook-scripts
        - pixelbook-touchpad-service
        - pixelbook-touchpad-tweak
        - pixelbook-udev
        - xdotool
        state: present

    - name: Add you to the input and tty group
      user:
        name: "{{ ansible_user_id }}"
        groups: input,tty
        append: yes
      become: true

    - name: Check for acpi powerconf.disabled~
      stat: path=/etc/acpi/events/powerconf.disabled~
      register: power_stat

    - name: If we moved the file put it back
      command: mv /etc/acpi/events/powerconf.disabled~ /etc/acpi/events/powerconf
      become: true
      when: power_stat.stat.exists

    - name: Comment out powerconf
      copy:
        content: |
                 # ACPID config to power down machine if powerbutton is pressed, but only if
                 # no gnome-power-manager is running

                 #The following two lines were commented out by the pixelbook-fedora playbook
                 #event=button/power.*
                 #action=/etc/acpi/actions/power.sh

        dest: /etc/acpi/events/powerconf
      become: true

    - name: Enable acpid
      become: true
      systemd:
        name: acpid
        state: restarted
        enabled: yes

    - name: Enable pixelbook services
      become: true
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      with_items:
      - pixelbook-aer
      - pixelbook-touchpad

    - name: Enable pixelbook user services
      systemd:
        name: "{{ item }}"
        scope: user
        state: started
        enabled: yes
      with_items:
      - pixelbook-acpi
      - pixelbook-display-orientation
      - pixelbook-touchscreen-click
      - pixelbook-keyboard-backlight

    - name: Ensure keyboard hwdb is not overridden
      become: true
      file:
        path: /etc/udev/hwdb.d/61-eve-keyboard.hwdb
        state: absent
      when: leftmeta == "capslock"

    - name: Create keyboard hwdb override
      become: true
      copy:
        src: /usr/lib/udev/hwdb.d/61-eve-keyboard.hwdb
        dest: /etc/udev/hwdb.d/61-eve-keyboard.hwdb
      when: leftmeta != "capslock"

    - name: Set leftmeta to leftmeta in hwdb override
      become: true
      lineinfile:
        path: /etc/udev/hwdb.d/61-eve-keyboard.hwdb
        regexp: '^ KEYBOARD_KEY_db=capslock$'
        line: ' KEYBOARD_KEY_db=leftmeta'
      when: leftmeta != "capslock"

    - name: Update hwdb
      become: true
      shell: systemd-hwdb update

    - name: Reload udev rules
      become: true
      shell: udevadm control --reload-rules

    - name: trigger udev
      become: true
      shell: udevadm trigger

    always:
    - name: Unmount recovery image
      mount:
        path: /mnt/chromeos_recovery_image
        src: "/dev/mapper/{{ loop_device }}"
        opts: ro
        state: absent
        fstab: "{{ tmp_dir.path }}/fstab }}"
      become: true
      when: tmp_dir is defined

    - name: Remove device maps
      command: "kpartx -dv {{ tmp_dir.path }}/{{ recovery_image_unarchive_results.files | first }}"
      become: true
      when: recovery_image_unarchive_results is defined

    - name: Remove tmp directory
      file:
        state: absent
        path: "{{ tmp_dir.path }}"
      when: tmp_dir is defined
